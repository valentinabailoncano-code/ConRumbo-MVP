# app.py
import streamlit as st
from pathlib import Path
from streamlit.components.v1 import html
from io import BytesIO
import pandas as pd
from datetime import datetime
import zipfile, os, re
import platform
st.set_page_config(page_title="ConRumbo ‚Äì Primeros Auxilios (MVP)", page_icon="üÜò", layout="wide")

# Icono de descargas t√©cnicas flotante
import base64

def descarga_icono():
    icon_path = "assets/icono_descarga.png"  # Usa el PNG que t√∫ quieras
    if os.path.exists(icon_path):
        with open(icon_path, "rb") as img:
            b64_img = base64.b64encode(img.read()).decode("utf-8")
            img_tag = f'<img src="data:image/png;base64,{b64_img}" width="32" title="Descargar app.py y requirements.txt" style="cursor:pointer;">'
    else:
        img_tag = '<span style="font-size:22px;" title="Descargar app.py y requirements.txt">‚¨áÔ∏è</span>'

    html_code = f"""
    <div style='position:fixed;top:22px;right:22px;z-index:9999;'>
        <a href="#descargas-tecnicas" title="Descargar c√≥digo">{img_tag}</a>
    </div>
    """
    st.markdown(html_code, unsafe_allow_html=True)

descarga_icono()

# Estilo y bot√≥n SOS adaptado
st.markdown("""
<style>
:root {
  --brand:#D90429; --brand-dark:#a1031e;
}
.sos-wrap {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  gap: 12px;
  border-bottom: 1px solid #e9e9ee;
  padding-bottom: 14px;
  margin-bottom: 16px;
}
.sos-btn {
  appearance: none;
  border: 0;
  background: var(--brand);
  color: #fff;
  font-weight: bold;
  font-size: 22px;
  padding: 18px 30px;
  border-radius: 12px;
  box-shadow: 0 6px 0 var(--brand-dark), 0 10px 24px rgba(217, 4, 41, .25);
  cursor: pointer;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  gap: 10px;
}
.sos-btn:active {
  transform: translateY(2px);
  box-shadow: 0 4px 0 var(--brand-dark), 0 8px 18px rgba(217, 4, 41, .25);
}
.sos-badge {
  background: #fff;
  color: var(--brand);
  font-weight: bold;
  border-radius: 999px;
  padding: 6px 10px;
  font-size: 14px;
  box-shadow: inset 0 0 0 2px var(--brand);
}
@media (max-width: 600px) {
  .sos-btn {
    font-size: 18px;
    padding: 14px 20px;
  }
  .sos-wrap {
    flex-direction: column;
    align-items: flex-start;
  }
}
</style>
""", unsafe_allow_html=True)

EMERGENCY_NUMBER = "112"

# HTML del bot√≥n SOS embebido en todas las secciones
sos_html = f"""
<div class="sos-wrap">
  <a class="sos-btn" href="tel:{EMERGENCY_NUMBER}">
    <span class="sos-badge">SOS</span> LLAMAR {EMERGENCY_NUMBER}
  </a>
  <div>
    <div style="font-size:14px; color:#6b7280; margin-bottom:2px;">Bot√≥n de emergencia</div>
    <div style="font-size:13px; color:#111827;">En m√≥vil pulsa el bot√≥n. En ordenador marca manualmente: <strong>{EMERGENCY_NUMBER}</strong></div>
  </div>
</div>
"""

def mostrar_boton_sos():
    st.markdown(sos_html, unsafe_allow_html=True)

# =========================
# Estado de sesi√≥n
# =========================
defaults = {
    "emergency_mode": False,
    "scenario": None,
    "step_idx": 0,
    "chat_history": [],
    "progress": {
        "Emergencias": False,
        "Primeros auxilios": False,
        "Kits de supervivencia": False,
        "Mant√©n la calma (APA)": False,
        "Simulacro completado": False,
    }
}
for k, v in defaults.items():
    if k not in st.session_state:
        st.session_state[k] = v if not isinstance(v, dict) else v.copy()

# =========================
# Utilidades generales
# =========================
def to_bytes(content: str) -> bytes:
    bio = BytesIO()
    bio.write(content.encode("utf-8"))
    bio.seek(0)
    return bio.read()

def download_button(label: str, content: str, filename: str):
    st.download_button(label, data=content.encode("utf-8"), file_name=filename, mime="text/markdown")

# =========================
# Contenidos gu√≠a (checklists)
# =========================
SCENARIOS = {
    "Atragantamiento (adulto)": [
        "Comprueba si tose o habla. Si NO puede, es obstrucci√≥n severa.",
        "Pide ayuda y llama al 112.",
        "Da 5 golpes entre om√≥platos.",
        "Aplica 5 compresiones abdominales (Heimlich).",
        "Alterna 5 golpes / 5 compresiones hasta expulsar el objeto.",
        "Si pierde la consciencia, inicia RCP y usa DEA si lo hay."
    ],
    "Quemadura t√©rmica": [
        "Retira la fuente de calor. No arranques ropa pegada.",
        "Enfr√≠a con agua templada 15‚Äì20 min. No uses hielo.",
        "Retira anillos/relojes si hay inflamaci√≥n.",
        "Cubre con pa√±o est√©ril/limpio. No revientes ampollas.",
        "Quemaduras extensas, qu√≠micas o el√©ctricas: 112."
    ],
    "Desmayo (s√≠ncope)": [
        "T√∫mbala y eleva piernas 20‚Äì30 cm.",
        "Afloja ropa apretada, ventila el entorno.",
        "Valora respuesta y respiraci√≥n.",
        "Si no recupera en 1‚Äì2 min o hay signos graves: 112.",
        "Si no respira normalmente, inicia RCP."
    ],
    "Parada cardiorrespiratoria": [
        "Verifica seguridad de la escena.",
        "No respira o jadea: llama 112 inmediatamente.",
        "RCP: 30 compresiones a 100‚Äì120/min (profundidad 5‚Äì6 cm).",
        "2 ventilaciones si sabes y tienes barrera; si no, solo compresiones.",
        "Usa DEA en cuanto est√© disponible y sigue sus instrucciones.",
        "No interrumpas hasta relevo o recuperaci√≥n de signos de vida."
    ]
}

PRIMEROS_AUX = {
    "Hemorragias": [
        "Presi√≥n directa 10 min con ap√≥sito/pa√±o limpio.",
        "Eleva el miembro si es posible.",
        "Si no cede o es abundante: 112.",
        "No retires cuerpos extra√±os incrustados: estabiliza alrededor."
    ],
    "Convulsiones": [
        "Protege la cabeza, retira objetos cercanos.",
        "No sujetes, no introduzcas nada en la boca.",
        "Controla tiempo de convulsi√≥n.",
        "Si dura >5 min, se repite, embarazo o lesi√≥n: 112.",
        "En recuperaci√≥n: posici√≥n lateral de seguridad."
    ],
    "Intoxicaciones": [
        "Identifica sustancia, cantidad y tiempo.",
        "No provoques el v√≥mito.",
        "Si hay dificultad respiratoria, convulsiones o ni√±os: 112.",
        "Lleva envase/etiqueta al centro sanitario si procede."
    ],
    "Traumatismos": [
        "Inmoviliza el √°rea lesionada.",
        "Hielo envuelto 10‚Äì15 min (descansos).",
        "Dolor intenso, deformidad, p√©rdida de funci√≥n o cabeza/cuello: 112."
    ]
}

KITS = {
    "Hogar": [
        "Guantes, mascarillas, gasas est√©riles, vendas, esparadrapo.",
        "Suero fisiol√≥gico, clorhexidina/antis√©ptico.",
        "Tijeras, pinzas, manta t√©rmica, term√≥metro.",
        "Analg√©sicos de uso com√∫n (si no hay contraindicaciones).",
        "Linterna, pilas, lista de tel√©fonos de emergencia."
    ],
    "Coche": [
        "Chaleco, tri√°ngulos, linterna, manta t√©rmica.",
        "Botiqu√≠n b√°sico (guantes, gasas, vendas, antis√©ptico).",
        "Agua, barritas energ√©ticas, navaja multiusos.",
        "Cargador m√≥vil y power bank."
    ],
    "Monta√±a": [
        "Manta t√©rmica, silbato, frontal, encendedor.",
        "Vendas el√°sticas, f√©rula ligera, tiritas, antis√©ptico.",
        "Sales de rehidrataci√≥n, comida energ√©tica, agua extra.",
        "Mapa/GPX offline, navaja, cordino."
    ]
}

APA_TEXT = (
    "APA ‚Äì Asegurar la escena ¬∑ Proteger a la v√≠ctima ¬∑ Avisar al 112.\\n"
    "1) Asegura el entorno (peligros el√©ctricos, tr√°fico, fuego).\\n"
    "2) Prot√©gete y protege a la v√≠ctima (guantes si es posible, posici√≥n segura).\\n"
    "3) Llama al 112 y describe clara y brevemente la situaci√≥n.\\n"
    "A√±ade respiraci√≥n 4‚Äë4‚Äë4: inhala 4s, ret√©n 4s, exhala 4s (3 ciclos)."
)

# =========================
# MANIFIESTO DE MEDIOS (fotos y v√≠deos) ‚Äî Rellena 'url' o 'path' cuando tengas material
# =========================
MEDIA = {
    "Atragantamiento (adulto)": {
        "images": [
            {"title": "Golpes interescapulares", "url": "", "path": "assets/atragantamiento/golpes.jpg"},
            {"title": "Compresi√≥n abdominal (Heimlich)", "url": "", "path": "assets/atragantamiento/heimlich.jpg"},
        ],
        "videos": [
            {"title": "Secuencia completa (demo)", "url": "", "path": "assets/atragantamiento/atragantamiento_demo.mp4"},
        ],
    },
    "Quemadura t√©rmica": {
        "images": [
            {"title": "Enfriado con agua", "url": "", "path": "assets/quemaduras/enfriar.jpg"},
        ],
        "videos": [
            {"title": "Qu√© NO hacer con quemaduras", "url": "", "path": "assets/quemaduras/evitar.mp4"},
        ],
    },
    "Desmayo (s√≠ncope)": {"images": [], "videos": []},
    "Parada cardiorrespiratoria": {
        "images": [
            {"title": "Compresiones 100‚Äì120/min", "url": "", "path": "assets/rcp/compresiones.jpg"},
            {"title": "DEA: colocaci√≥n parches", "url": "", "path": "assets/rcp/dea_parches.jpg"},
        ],
        "videos": [
            {"title": "DEA: pasos guiados", "url": "", "path": "assets/rcp/dea_pasos.mp4"},
        ],
    },
    "Hemorragias": {
        "images": [{"title": "Presi√≥n directa", "url": "", "path": "assets/hemorragias/presion.jpg"}],
        "videos": [{"title": "Torniquete (criterios)", "url": "", "path": ""}],
    },
    "Convulsiones": {"images": [], "videos": []},
    "Intoxicaciones": {"images": [], "videos": []},
    "Traumatismos": {"images": [], "videos": []},
}

# =========================
# Utilidades de VOZ (Web Speech API en el navegador)
# =========================
def tts_button(label, text):
    html(f"""
    <button id="speakBtn" style="padding:8px 12px;border:1px solid #ccc;border-radius:8px;cursor:pointer">{label}</button>
    <script>
      const text = {text!r};
      const btn = document.getElementById("speakBtn");
      if (btn) {{
        btn.onclick = () => {{
          const u = new SpeechSynthesisUtterance(text);
          u.lang = "es-ES";
          window.speechSynthesis.cancel();
          window.speechSynthesis.speak(u);
        }};
      }}
    </script>
    """, height=40)

def stt_widget():
    st.caption("üéôÔ∏è Usa Chrome/Edge. Pulsa *Escuchar*, habla y *Parar* para usar el texto.")
    stt_code = """
    <div>
      <button id="startRec" style="padding:8px 12px;border:1px solid #ccc;border-radius:8px;margin-right:8px;cursor:pointer">üéôÔ∏è Escuchar</button>
      <button id="stopRec" style="padding:8px 12px;border:1px solid #ccc;border-radius:8px;cursor:pointer">‚ñ† Parar</button>
      <p id="sttStatus" style="font-family:system-ui, sans-serif; font-size:14px; color:#444;margin-top:8px;"></p>
      <textarea id="sttOut" rows="2" style="width:100%;margin-top:6px;" placeholder="Transcripci√≥n de voz‚Ä¶"></textarea>
    </div>
    <script>
      const status = document.getElementById('sttStatus');
      const out = document.getElementById('sttOut');
      let rec, finalText = "";
      function supported() { return ('webkitSpeechRecognition' in window) || ('SpeechRecognition' in window); }
      function getRec() {
        const Ctor = window.SpeechRecognition || window.webkitSpeechRecognition;
        const r = new Ctor();
        r.lang = 'es-ES';
        r.continuous = true;
        r.interimResults = true;
        r.onresult = (e) => {
          let interim = "";
          for (let i = e.resultIndex; i < e.results.length; i++) {
            const t = e.results[i][0].transcript;
            if (e.results[i].isFinal) finalText += t;
            else interim += t;
          }
          out.value = (finalText + " " + interim).trim();
        };
        r.onerror = (e)=>{ status.innerText = "Error: " + e.error; };
        r.onend = ()=>{ status.innerText = "Reconocimiento detenido."; };
        return r;
      }
      if (!supported()) { status.innerText = "‚ö†Ô∏è Tu navegador no soporta reconocimiento de voz."; }
      document.getElementById('startRec').onclick = () => {
        if (!supported()) return;
        finalText = "";
        rec = getRec(); rec.start();
        status.innerText = "üéß Escuchando‚Ä¶";
      };
      document.getElementById('stopRec').onclick = () => {
        if (rec) rec.stop(); status.innerText = "‚èπÔ∏è Parado.";
      };
    </script>
    """
    html(stt_code, height=200)
    return st.text_input("üëâ (Opcional) Pega o edita el texto reconocido:", key="stt_input")

# =========================
# Bloque reutilizable de medios
# =========================
def media_block(title_key: str):
    st.markdown("#### üì∑ Fotos y üé¨ V√≠deos")
    data = MEDIA.get(title_key, {"images": [], "videos": []})
    imgs = data.get("images", [])
    vids = data.get("videos", [])

    # Im√°genes
    if imgs:
        cols = st.columns(min(3, len(imgs)))
        for i, item in enumerate(imgs):
            with cols[i % len(cols)]:
                src_url = item.get("url")
                src_path = item.get("path")
                title = item.get("title", "")
                if src_url:
                    st.image(src_url, caption=title, use_container_width=True)
                elif src_path and os.path.exists(src_path):
                    st.image(src_path, caption=title, use_container_width=True)
                else:
                    st.info(f"üìÑ Placeholder ‚Äî {title} (pendiente)")
    else:
        st.info("A√∫n no hay im√°genes. A√±√°delas en MEDIA['...']['images'].")

    # V√≠deos
    if vids:
        for v in vids:
            t = v.get("title", "V√≠deo")
            url = v.get("url")
            path = v.get("path")
            st.markdown(f"**{t}**")
            if url:
                st.video(url)
            elif path and os.path.exists(path):
                st.video(path)
            else:
                st.info("üé¨ Placeholder de v√≠deo (pendiente)")
    else:
        st.info("A√∫n no hay v√≠deos. A√±√°delos en MEDIA['...']['videos'].")

    with st.expander("‚ûï A√±adir material r√°pido para la demo (no persistente)"):
        up_imgs = st.file_uploader("Sube im√°genes", type=["png","jpg","jpeg"], accept_multiple_files=True, key=f"upimg_{title_key}")
        up_vids = st.file_uploader("Sube v√≠deos", type=["mp4","mov","webm"], accept_multiple_files=True, key=f"upvid_{title_key}")
        if up_imgs:
            st.success(f"Im√°genes cargadas: {len(up_imgs)}")
            for f in up_imgs:
                st.image(f, caption=f.name, use_container_width=True)
        if up_vids:
            st.success(f"V√≠deos cargados: {len(up_vids)}")
            for f in up_vids:
                st.video(f)

# =========================
def zip_scenario_assets(scenario: str) -> bytes:
    """Crea un ZIP en memoria con los ficheros locales del escenario."""
    buf = BytesIO()
    with zipfile.ZipFile(buf, "w", zipfile.ZIP_DEFLATED) as z:
        media = MEDIA.get(scenario, {})
        for item in media.get("images", []) + media.get("videos", []):
            p = item.get("path")
            if p and os.path.exists(p):
                z.write(p, arcname=os.path.basename(p))
    buf.seek(0)
    return buf.read()

# =========================
# Cabecera
# =========================
col_logo, col_title = st.columns([0.15, 0.85])
with col_logo:
    # Coloca tu logo en assets/evolve_logo.png
    if os.path.exists("assets/evolve_logo.png"):
        st.image("assets/evolve_logo.png", width=96)
with col_title:
    st.title("üÜò ConRumbo ‚Äì MVP de Primeros Auxilios")
    st.markdown("Asistente accionable: **bot√≥n de emergencia**, **chat + voz**, **material descargable**, **fotos/v√≠deos**.")
st.caption("Demo educativa ‚Äì No sustituye formaci√≥n sanitaria ni la atenci√≥n profesional.")

# =========================
# Navegaci√≥n (pesta√±as arriba)
# =========================
tabs = st.tabs([
    "üÜò Emergencias inmediatas",
    "üíâ Primeros auxilios",
    "üéí Kits de supervivencia",
    "üìä Progreso",
    "üòå Mant√©n la calma (APA)",
    "ü§ñ Chat (voz y texto)",
    "üóÇÔ∏è Centro de medios"
])


if os.path.exists("requirements.txt"):
        with open("requirements.txt", "rb") as f:
            st.download_button("Descargar requirements.txt", f.read(), file_name="requirements.txt", mime="text/plain", use_container_width=True)

# =========================
# 1) EMERGENCIAS INMEDIATAS
# =========================
with tabs[0]:
    mostrar_boton_sos()
    st.subheader("üö® Bot√≥n de emergencia")
    left, right = st.columns([0.58, 0.42])
    with left:
        if st.button("üÜò ACTIVAR / SALIR MODO EMERGENCIA", use_container_width=True):
            st.session_state.emergency_mode = not st.session_state.emergency_mode
            if not st.session_state.emergency_mode:
                st.session_state.scenario = None
                st.session_state.step_idx = 0

        st.session_state.scenario = st.selectbox(
            "Selecciona el tipo de emergencia",
            ["‚Äî", *SCENARIOS.keys()],
            index=0 if not st.session_state.scenario
            else ["‚Äî", *SCENARIOS.keys()].index(st.session_state.scenario)
        )

        if st.session_state.emergency_mode and st.session_state.scenario in SCENARIOS:
            steps = SCENARIOS[st.session_state.scenario]
            st.success(f"**{st.session_state.scenario}** ¬∑ Paso {st.session_state.step_idx+1} de {len(steps)}")
            current_text = steps[st.session_state.step_idx]
            st.markdown(f"### ‚úÖ Instrucci√≥n\n{current_text}")
            tts_button("üîä Leer en voz alta", f"{st.session_state.scenario}. {current_text}")

            b1, b2, b3 = st.columns(3)
            with b1:
                if st.button("‚ü∏ Anterior", disabled=st.session_state.step_idx == 0, use_container_width=True):
                    st.session_state.step_idx -= 1
            with b2:
                if st.button("‚ü≤ Reiniciar", use_container_width=True):
                    st.session_state.step_idx = 0
            with b3:
                if st.button("Siguiente ‚üπ", disabled=st.session_state.step_idx == len(steps)-1, use_container_width=True):
                    st.session_state.step_idx += 1

            st.info("Si la situaci√≥n es grave o dudas: **llama al 112**.")
            st.markdown("---")
            media_block(st.session_state.scenario)
        else:
            st.info("Pulsa **ACTIVAR** y elige un escenario para iniciar la gu√≠a.")

    with right:
        st.markdown("##### üì• Descargas del escenario")
with st.expander("Descargar gu√≠a del escenario", expanded=False):
        if st.session_state.scenario in SCENARIOS:
            txt = f"# {st.session_state.scenario}\n\n" + "\n".join([f"- {s}" for s in SCENARIOS[st.session_state.scenario]])
            download_button("üìÑ Descargar gu√≠a (.md)", txt, f"ConRumbo_{st.session_state.scenario.replace(' ','_')}.md")

            # ZIP de material (si hay ficheros locales disponibles)
            if st.button("üì¶ Preparar material (ZIP)"):
                data = zip_scenario_assets(st.session_state.scenario)
                if data:
                            st.download_button(
            "üì¶ Descargar ZIP",
                        data=data,
                        file_name=f"ConRumbo_{st.session_state.scenario.replace(' ','_')}_media.zip",
                        mime="application/zip",
                    )
                else:
                    st.warning("No hay archivos locales en assets/ para este escenario todav√≠a.")

st.session_state.progress["Emergencias"] = True

# =========================
# 2) PRIMEROS AUXILIOS
# =========================
with tabs[1]:
    mostrar_boton_sos()
    st.subheader("üíâ Gu√≠as esenciales")
    for titulo, pasos in PRIMEROS_AUX.items():
        with st.expander(f"üìÑ {titulo}", expanded=False):
            st.markdown("\n".join([f"- {p}" for p in pasos]))
            txt = f"# {titulo}\n\n" + "\n".join([f"- {p}" for p in pasos])
            download_button(f"Descargar {titulo} (.md)", txt, f"ConRumbo_{titulo.replace(' ','_')}.md")
            st.markdown("---")
            media_block(titulo)
    st.session_state.progress["Primeros auxilios"] = True

# =========================
# 3) KITS DE SUPERVIVENCIA
# =========================
with tabs[2]:
    mostrar_boton_sos()
    st.subheader("üéí Listas recomendadas")
    cols = st.columns(3)
    for i, (kit, items) in enumerate(KITS.items()):
        with cols[i]:
            st.markdown(f"### {kit}")
            st.markdown("\n".join([f"- {it}" for it in items]))
            txt = f"# Kit de supervivencia ‚Äì {kit}\n\n" + "\n".join([f"- {it}" for it in items])
            download_button(f"Descargar {kit} (.md)", txt, f"ConRumbo_Kit_{kit.replace(' ','_')}.md")
    st.session_state.progress["Kits de supervivencia"] = True

# =========================
# 4) PROGRESO
# =========================
with tabs[3]:
    mostrar_boton_sos()
    st.subheader("üìä Tu progreso")
    done_count = 0
    total = len(st.session_state.progress)
    for k in list(st.session_state.progress.keys()):
        st.session_state.progress[k] = st.checkbox(k, value=st.session_state.progress[k])
        done_count += 1 if st.session_state.progress[k] else 0

    pct = int(100 * done_count / total)
    st.progress(pct / 100)
    st.write(f"**Completado: {pct}%**")

    df = pd.DataFrame(
        [{"M√≥dulo": k, "Completado": v, "Fecha": datetime.now().strftime("%Y-%m-%d %H:%M:%S")} for k, v in st.session_state.progress.items()]
    )
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button("‚¨áÔ∏è Exportar progreso (.csv)", data=csv, file_name="ConRumbo_progreso.csv", mime="text/csv")

# =========================
# 5) MANT√âN LA CALMA (APA)
# =========================
with tabs[4]:
    mostrar_boton_sos()
    st.subheader("üòå Mant√©n la calma (APA)")
    st.markdown(
        "**APA** = **Asegurar** la escena ¬∑ **Proteger** a la v√≠ctima ¬∑ **Avisar** al 112.\n\n" +
        APA_TEXT.replace("\n", "<br>"),
        unsafe_allow_html=True
    )

    st.markdown("#### ü´Å Respiraci√≥n 4‚Äë4‚Äë4 (gu√≠a por voz)")
    tts_button("üîä Escuchar rutina", "Inhala cuatro segundos. Mant√©n cuatro. Exhala cuatro. Repite tres ciclos. Mant√©n la calma. Act√∫a con seguridad.")
    download_button("Descargar rutina APA (.md)", "# APA ‚Äì Mant√©n la calma\n\n" + APA_TEXT, "ConRumbo_APA.md")

    st.session_state.progress["Mant√©n la calma (APA)"] = True

# =========================
# 6) CHAT (voz y texto)
# =========================
with tabs[5]:
    mostrar_boton_sos()
    st.subheader("ü§ñ Chat de preguntas (voz y texto)")
    st.caption("Describe la situaci√≥n: *‚Äúse est√° atragantando y no respira‚Äù*, *‚Äúhay una quemadura con aceite‚Äù*, etc.")

    INTENTS = {
        "atragant": "Parece **atragantamiento**. Si no puede toser/hablar: 112, 5 golpes interescapulares y 5 Heimlich, alternando. Si pierde consciencia, inicia RCP.",
        "quemad": "Para **quemaduras**: enfr√≠a 15‚Äì20 min con agua templada (no hielo), cubre con pa√±o est√©ril, no revientes ampollas. Si es extensa/qu√≠mica/el√©ctrica: 112.",
        "desmay": "Para **desmayo**: tumbar, elevar piernas, vigilar respiraci√≥n. Si no recupera en 1‚Äì2 min o hay signos graves: 112.",
        "rcp|parada|no respira|sin respirar": "Si **no respira**: 112 y **RCP**. 30 compresiones a 100‚Äì120/min (5‚Äì6 cm), 2 ventilaciones si sabes; si no, solo compresiones. Usa DEA si hay.",
        "corte|hemorrag": "Para **hemorragias**: presi√≥n directa 10 min, eleva miembro. Si no cede o es abundante: 112.",
        "intoxic": "En **intoxicaciones**: no provoques el v√≥mito. Identifica sustancia/tiempo. Dificultad respiratoria, convulsiones o ni√±os: 112.",
        "convul": "En **convulsiones**: protege cabeza, no sujetes, nada en la boca, controla tiempo. Si >5 min o repetidas: 112.",
        "trauma|golpe": "En **traumatismos**: inmoviliza, hielo envuelto 10‚Äì15 min, 112 si dolor intenso, deformidad o cabeza/cuello."
    }
    FAQ = {
        "112": "En Espa√±a y la UE, el **112** es el n√∫mero √∫nico de emergencias.",
        "dea": "El DEA gu√≠a por voz: enci√©ndelo, coloca parches como indica, no toques al analizar/descargar.",
        "guantes": "Usa **guantes** si puedes. L√°vate manos tras asistir y evita contacto con fluidos."
    }

    def route_message(msg: str) -> str:
        low = msg.lower()
        for key, resp in INTENTS.items():
            if re.search(key, low):
                return resp
        for key, resp in FAQ.items():
            if key in low:
                return resp
        return ("No estoy seguro. Si hay peligro vital, **llama al 112**. "
                "Dime: ¬ørespira con normalidad? ¬øest√° consciente? ¬øhay sangrado, quemadura o atragantamiento?")

    # Historial
    for role, text in st.session_state.chat_history:
        st.markdown(f"**{'üë§ T√∫' if role=='user' else 'ü§ñ ConRumbo'}:** {text}")

    voice_text = stt_widget()
    user_msg = st.text_input("Escribe tu mensaje:", key="chat_input", placeholder="Describe la situaci√≥n‚Ä¶")

    csend1, csend2 = st.columns([0.55, 0.45])
    with csend1:
        send = st.button("Enviar", use_container_width=True)
    with csend2:
        if voice_text and st.button("Usar texto de voz y enviar", use_container_width=True):
            user_msg = voice_text
            send = True

    if send and user_msg:
        st.session_state.chat_history.append(("user", user_msg))
        bot_resp = route_message(user_msg)
        st.session_state.chat_history.append(("bot", bot_resp))
        with st.expander("üîä Leer √∫ltima respuesta"):
            tts_button("Reproducir", bot_resp)
        st.rerun()

# =========================
# 7) CENTRO DE MEDIOS
# =========================
with tabs[6]:
    mostrar_boton_sos()
    st.subheader("üóÇÔ∏è Centro de medios (resumen)")
    faltantes = []
    for k, v in MEDIA.items():
        st.markdown(f"### {k}")
        imgs_all = v.get("images", [])
        vids_all = v.get("videos", [])
        imgs_ok = [i for i in imgs_all if i.get("url") or i.get("path")]
        vids_ok = [i for i in vids_all if i.get("url") or i.get("path")]
        st.write(f"Im√°genes configuradas: {len(imgs_ok)} / {len(imgs_all)}")
        st.write(f"V√≠deos configurados: {len(vids_ok)} / {len(vids_all)}")
        if len(imgs_ok) < len(imgs_all) or len(vids_ok) < len(vids_all):
            faltantes.append(k)
        st.markdown("---")
    if faltantes:
        st.warning("Faltan medios en: " + ", ".join(faltantes))
    else:
        st.success("¬°Todo el material est√° asignado!")

# =========================
# 8) üîΩ Descargas t√©cnicas (ancla flotante)
# =========================
st.markdown("----")
st.markdown('<a name="descargas-tecnicas"></a>', unsafe_allow_html=True)
st.subheader("üì• Descargas t√©cnicas")

try:
    import inspect
    current_script = inspect.getsourcefile(lambda: None) or __file__
    if os.path.exists(current_script):
        with open(current_script, "rb") as f:
            st.download_button(
                "Descargar app.py",
                data=f.read(),
                file_name="app.py",
                mime="text/x-python"
            )
except Exception as e:
    st.caption(f"No se pudo preparar la descarga del script: {e}")

if os.path.exists("requirements.txt"):
    with open("requirements.txt", "rb") as f:
        st.download_button(
            "Descargar requirements.txt",
            data=f.read(),
            file_name="requirements.txt",
            mime="text/plain"
        )

# Pie
st.divider()
st.caption("‚ö†Ô∏è MVP demostrativo/educativo. No sustituye la formaci√≥n en primeros auxilios ni la atenci√≥n profesional.")
